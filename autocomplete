import java.util.LinkedList;
import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
 
class TrieNode 
{
	char data;     
	LinkedList<TrieNode> children; 
	TrieNode parent;
	boolean isEnd;

	public TrieNode(char c) 
	{
		data = c;
		children = new LinkedList();
		isEnd = false;        
	}  
    
	public TrieNode getChild(char c) 
	{
		if (children != null)
			for (TrieNode eachChild : children)
				if (eachChild.data == c)
					return eachChild;
		return null;
	}
    
	public List getWords() 
	{
		List list = new ArrayList();      
		if (isEnd) 
		{
			list.add(toString());
		}
       
		if (children != null) 
		{
			for (int i=0; i< children.size(); i++) 
			{
				if (children.get(i) != null) 
				{
					list.addAll(((TrieNode) children.get(i)).getWords());
				}
			}
		}       
		return list; 
	}
    
	public String toString() 
	{
		if (parent == null) 
			return ""; 
		return parent.toString() + new String(new char[] {data});
	}
}


 class Trie 
{
	private TrieNode root;	 
    
	public Trie() 
	{
		root = new TrieNode(' '); 
	}

	public void insert(String word) 
	{
		if (search(word) == true) 
			return;    
		TrieNode current = root; 
		TrieNode pre;
		for (char ch : word.toCharArray()) 
		{
			pre = current;
			TrieNode child = current.getChild(ch);
			if (child != null) 
			{
				current = child;
				child.parent = pre;
			} 
			else 
			{
				current.children.add(new TrieNode(ch));
				current = current.getChild(ch);
				current.parent = pre;
			}
		}
		current.isEnd = true;
	}
    
	public boolean search(String word) 
	{
		TrieNode current = root;      
		for (char ch : word.toCharArray()) 
		{
			if (current.getChild(ch) == null)
				return false;
			current = current.getChild(ch);    
		}      
		if (current.isEnd == true)
			return true;
		return false;
	}
    
	public List autocomplete(String prefix) 
	{     
		TrieNode lastNode = root;
		for (int i = 0; i< prefix.length(); i++) 
		{
			lastNode = lastNode.getChild(prefix.charAt(i));	     
			if (lastNode == null) 
				return new ArrayList();      
		}
		return lastNode.getWords();
	}   
   
 
	public static void main(String args[]) 
	{ 
		Trie t = new Trie(); 
		File file = new File("corncob_lowercase.txt"); 
	
		BufferedReader br = null;
		try 
		{
			br = new BufferedReader(new FileReader(file));
		} 
		catch (FileNotFoundException e1) 
		{
			e1.printStackTrace();
		} 
		String st; 
		try 
		{
			while ((st = br.readLine()) != null)
			{ 
				t.insert(st); 
			}
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		} 
		String s = "rock";
		System.out.println("suggestions for '" + s +"':");
		List a= t.autocomplete(s);
		for (int i = 0; i < a.size(); i++) 
		{
			System.out.println(a.get(i));
		}
	} 
}
